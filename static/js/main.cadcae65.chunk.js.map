{"version":3,"sources":["Chart.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["Chart","_ref","from","to","steps","f","_ref$refs","refs","label","data","step","Math","floor","x","push","toFixed","y","react_default","a","createElement","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","value","position","offset","angle","map","ref","Object","assign","key","stroke","Input","handler","name","className","type","placeholder","onChange","e","target","App","_useState","useState","_useState2","slicedToArray","k","setK","_useState3","_useState4","theta","setTheta","_useState5","_useState6","d0","setD0","_useState7","_useState8","p0","setP0","R0","S0","V0","pow","_useState9","_useState10","timesR","setTimesR","_useState11","_useState12","dRPercent","setDRPercent","priceFofR","_R","_useState13","_useState14","RStartPercent","setRStartPercent","dR","parseInt","parseFloat","RStart","p1","pStart","pdR","pAvg","dSAvg","initData","priceData","buyData","src_Input","inpt","i","_ref2","b","Fragment","_ref3","_ref4","_ref5","_ref6","role","src_Chart","_S","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cadcae65.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Label,\n  ReferenceLine\n} from \"recharts\";\n\nfunction Chart({ from, to, steps, f, refs = [], label }) {\n  const data = [];\n  const step = Math.floor(to / steps);\n  for (let x = from; x < to; x += step) {\n    data.push({\n      x: (x * 1e-6).toFixed(2),\n      y: f(x)\n    });\n  }\n\n  return (\n    <LineChart\n      width={500}\n      height={300}\n      data={data}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"x\">\n        <Label value={label} position=\"insideBottom\" offset={-5} />\n      </XAxis>\n      <YAxis\n        dataKey=\"y\"\n        label={{\n          value: \"Price\",\n          angle: -90,\n          position: \"insideLeft\"\n        }}\n      />\n      <Tooltip />\n      {refs.map(ref => (\n        <ReferenceLine key={ref.label} {...ref} stroke=\"red\" />\n      ))}\n      <Line dataKey=\"y\" />\n    </LineChart>\n  );\n}\n\nexport default Chart;\n","import React from \"react\";\n\nfunction Input({ handler, name }) {\n  return (\n    <div className=\"input-group mb-3\">\n      <div className=\"input-group-prepend\">\n        <span className=\"input-group-text\">{name}</span>\n      </div>\n      <input\n        type=\"number\"\n        className=\"form-control\"\n        placeholder=\"Reserve\"\n        value={handler[0]}\n        onChange={e => handler[1](e.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default Input;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Chart from \"./Chart\";\nimport Input from \"./Input\";\n\nfunction App() {\n  // Curve parameters\n  const [k, setK] = useState(2.83333333333333333); // initial kappa, signifying curvature\n  const [theta, setTheta] = useState(40); // initial funding pool allocation\n  const [d0, setD0] = useState(2.5e6); // initial raise xDAI\n  const [p0, setP0] = useState(0.01); // initial price xDAI\n  // Sale parameters\n  const R0 = (1 - theta / 100) * d0; // initial Reserve, xDAI\n  const S0 = d0 / p0; // initial supply, Tokens\n  const V0 = S0 ** k / R0; // invariant coef\n\n  const [timesR, setTimesR] = useState(2);\n\n  const [dRPercent, setDRPercent] = useState(1);\n\n  const priceFofR = _R => (k * _R ** ((k - 1) / k)) / V0 ** (1 / k);\n  const priceFofS = _S => (k * _S ** (k - 1)) / V0;\n\n  const [RStartPercent, setRStartPercent] = useState(100); // initial price xDAI\n\n  // Scale\n  const dR = (parseInt(R0) * parseFloat(dRPercent)) / 100;\n  const RStart = (parseInt(R0) * parseFloat(RStartPercent)) / 100;\n  // Compute price\n  const p1 = priceFofR(R0);\n  const pStart = priceFofR(RStart);\n  const pdR = priceFofR(RStart + dR);\n  const pAvg = (pStart + pdR) / 2;\n  const dSAvg = parseInt(dR / pAvg);\n\n  const initData = [\n    [\"Initial reserve (xDAI)\", R0],\n    [\"Initial Supply (tokens)\", S0],\n    [\"Invariant coef\", V0]\n  ];\n\n  const priceData = [\n    [\"p1\", p1],\n    [\"p(R_start)\", pStart],\n    [\"p(R_start + dR)\", pdR]\n  ];\n\n  const buyData = [\n    [\"Dropping (Mil xDAI)\", dR * 1e-6],\n    [\"Average Price (xDAI / token)\", pAvg],\n    [\"Getting (Mil tokens)\", dSAvg * 1e-6]\n  ];\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"container\">\n          <h1>Token Bonding curve App</h1>\n          <div className=\"row m\">\n            {[\n              <Input name=\"k\" handler={[k, setK]} />,\n              <Input name=\"theta (%)\" handler={[theta, setTheta]} />,\n              <Input name=\"d0 (xDAI)\" handler={[d0, setD0]} />,\n              <Input name=\"p0 (xDAI)\" handler={[p0, setP0]} />\n            ].map((inpt, i) => (\n              <div key={i} className=\"col top-input\">\n                {inpt}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"row m\">\n            <div className=\"col\">\n              <h6>Initial data</h6>\n              <div className=\"data-grid\">\n                {initData.map(([a, b]) => (\n                  <>\n                    <span key={a + 1}>{a}</span>\n                    <span key={a + 2}>{b.toFixed(6)}</span>\n                  </>\n                ))}\n              </div>\n            </div>\n            <div className=\"col\">\n              <h6>Price data</h6>\n              <div className=\"data-grid\">\n                {priceData.map(([a, b]) => (\n                  <>\n                    <span key={a + 1}>{a}</span>\n                    <span key={a + 2}>{b.toFixed(6)}</span>\n                  </>\n                ))}\n              </div>\n            </div>\n            <div className=\"col\">\n              <h6>Buy data</h6>\n              <div className=\"data-grid\">\n                {buyData.map(([a, b]) => (\n                  <>\n                    <span key={a + 1}>{a}</span>\n                    <span key={a + 2}>{b.toFixed(6)}</span>\n                  </>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"row m\">\n            <div className=\"col\">\n              <div className=\"alert alert-secondary\" role=\"alert\">\n                Play around with the values below to simulate a buy\n              </div>\n            </div>\n          </div>\n\n          <div className=\"row m\">\n            {[\n              <Input name=\"Plot reserve times\" handler={[timesR, setTimesR]} />,\n              <Input\n                name=\"R start (as % of R0)\"\n                handler={[RStartPercent, setRStartPercent]}\n              />,\n              <Input\n                name=\"delta R (as % of R0)\"\n                handler={[dRPercent, setDRPercent]}\n              />\n            ].map((inpt, i) => (\n              <div key={i} className=\"col top-input big\">\n                {inpt}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"row m\">\n            <div className=\"col c\">\n              <Chart\n                {...{\n                  label: \"Reserve (R) [Mil xDAI]\",\n                  from: 0,\n                  to: timesR * R0,\n                  steps: 20,\n                  f: priceFofR,\n                  refs: [\n                    { y: p0, label: \"p0\" },\n                    { y: p1, label: \"p1\" },\n                    { y: pStart, label: \"pStart\" },\n                    { y: pdR, label: \"pdR\" }\n                  ]\n                }}\n              />\n            </div>\n            <div className=\"col c\">\n              <Chart\n                {...{\n                  label: \"Supply (R) [Mil Tokens]\",\n                  from: 0,\n                  to: timesR ** (1 / k) * S0,\n                  steps: 20,\n                  f: priceFofS,\n                  refs: [\n                    { y: p0, label: \"p0\" },\n                    { y: p1, label: \"p1\" },\n                    { y: pStart, label: \"pStart\" },\n                    { y: pdR, label: \"pdR\" }\n                  ]\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}